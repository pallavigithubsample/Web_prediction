# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wg8uz8l-5P7TbBC-nRA_SxhIGDvgX0nD
"""

import pandas as pd
import numpy as np
import seaborn as sns
import scipy
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.preprocessing import LabelEncoder
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import GradientBoostingClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
import matplotlib.pyplot as plt
from scipy import stats
import re

data=pd.read_csv("/seattle-weather.csv")
data.sample(20)

data.shape

data.isna().sum()

data.describe()

sns.set(style="darkgrid")
fig,axs=plt.subplots(2,2,figsize=(10,8))
sns.histplot(data=data,x="precipitation",kde=True,ax=axs[0,0],color='blue')
sns.histplot(data=data,x="temp_max",kde=True,ax=axs[0,1],color='green')
sns.histplot(data=data,x="temp_min",kde=True,ax=axs[1,0],color='red')
sns.histplot(data=data,x="wind",kde=True,ax=axs[1,1],color='skyblue')

sns.countplot(x=data.weather)

plt.figure(figsize=(14,4))
sns.boxplot(x=data.precipitation,y=data.weather)

data=data.drop(["date"],axis=1)

Q1=df.quantile(0.25)
Q3=df.quantile(0.75)
IQR=Q3-Q1
data=data[~((data<(Q1-1.5*IQR))|(data>(Q3+1.5*IQR))).any(axis=1)]

LE=LabelEncoder()
data['weather']=LE.fit_transform(data['weather'])
data.sample(20)

data['weather'].unique()

x=((df.loc[:,df.columns!="weather"]).astype(int)).values[:,0:]
y=df["weather"].values

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=2)

import warnings
warnings.filterwarnings('ignore')
xgb=XGBClassifier()
xgb.fit(x_train,y_train)
print("XGB Accuracy:{:.2f}%".format(xgb.score(x_test,y_test)*100))

from sklearn.metrics import precision_score
y_pred=xgb.predict(x_test)
#classes=list(classes)
cm=confusion_matrix(y_test, y_pred)
cr=precision_score(y_test,y_pred,pos_label='positive',average='micro')
print("\nCR by library method=\n",classification_report(y_test, y_pred))

svm=SVC()
svm.fit(x_train,y_train)
print("SVM Accuracy:{:.2f}%".format(svm.score(x_test,y_test)*100))

knn=KNeighborsClassifier()
knn.fit(x_train,y_train)
print("KNN Accuracy:{:.2f}%".format(knn.score(x_test,y_test)*100))

input=[[4,2.8,-9,9]]
ot=xgb.predict(input)
print("The weather is:",ot)

